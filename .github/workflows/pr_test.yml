name: PR test
on: [pull_request]

jobs:
  setup-jenkins:
    runs-on: ubuntu-latest
    services:
      jenkins:
        image: jenkins/jenkins:lts-jdk11
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # env:
        #   JAVA_OPTS: -Djenkins.install.runSetupWizard=false -Djava.util.logging.config.file=/var/jenkins_home/logging.properties
        ports:
          - 8080:8080
          - 50000:50000
    steps:
    - name: clone
      uses: actions/checkout@v3
    - uses: ./
      with:
        name: jenkins
        jcasc_path: testdata/jcasc
        install_suggested_plugins: true
        plugins_file: testdata/plugins.yml
        plugins: |
          job-dsl
          warnings-ng
    - uses: ./.github/actions/composite/post-commands
      with:
        id: ${{ job.services.jenkins.id }}
    - run: |
        jenkins-cli-groovy
        jenkins-cli-groovyfile

  setup-jenkins-spec-javaopt-jcasc-path:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version:
          - latest
          - lts
          - lts-jdk11
    services:
      jenkins:
        image: jenkins/jenkins:${{ matrix.version }}
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        env:
          # disable setup wizard + JCasC path
          JAVA_OPTS: -Djenkins.install.runSetupWizard=false -Dcasc.jenkins.config=/casc_configs
        ports:
          - 8080:8080
          - 50000:50000
      agent1:
        image: jenkins/jnlp-agent-jdk11
        # image: jenkins/jenkins:latest
    env:
      TEST_JOB: Test_GitHubToken
    steps:
    - name: clone
      uses: actions/checkout@v3
    - name: Replace jcasc path
      run: |
        find testdata -name "*.yml" -print0 | xargs -0 sed -i -e "s|/var/jenkins_home/casc_configs|/casc_configs|g"
    - run: |
        docker exec -u root ${{ job.services.jenkins.id }} apt-get update
        docker exec -u root ${{ job.services.jenkins.id }} apt-get install -y tcpdump
        docker exec -u root -d ${{ job.services.jenkins.id }} tcpdump -i any -U -w tcpdump.log tcp port 8080

        docker exec -u root ${{ job.services.agent1.id }} apt-get update
        docker exec -u root ${{ job.services.agent1.id }} apt-get install -y tcpdump
        docker exec -u root -d ${{ job.services.agent1.id }} tcpdump -i any -U -w tcpdump.log tcp port 8080
    - uses: ./
      with:
        name: jenkins
        nodes: |
          agent1
        jcasc_path: testdata/jcasc
        install_suggested_plugins: true
        plugins: job-dsl
        github_token: ${{ secrets.TEST_TOKEN }}
    - uses: ./.github/actions/composite/post-commands
      with:
        id: ${{ job.services.jenkins.id }}
    - name: List jobs
      run: |
        jenkins-cli list-jobs
    - name: List nodes
      run: |
        jenkins-cli-groovy 'jenkins.model.Jenkins.get().computers.each { println it.displayName }'
    - name: Build job
      run: |
        jenkins-cli build "${TEST_JOB}" -s
    - name: Build log
      run: |
        jenkins-build-log "${TEST_JOB}"
      if: success() || failure()
    - name: tcpdump log
      run: |
        docker exec -u root ${{ job.services.jenkins.id }} cat tcpdump.log
        docker exec -u root ${{ job.services.agent1.id }} cat tcpdump.log

        docker cp ${{ job.services.jenkins.id }}:tcpdump.log jenkins-tcpdump.log
        docker cp ${{ job.services.agent1.id }}:tcpdump.log agent1-tcpdump.log
        # cat tcpdump.log
      if: success() || failure()
    - uses: actions/upload-artifact@v3
      with:
        name: test-result
        path: |
          jenkins-tcpdump.log
          agent1-tcpdump.log
      if: success() || failure()

  setup-jenkins-default:
    runs-on: ubuntu-latest
    services:
      jenkins:
        image: jenkins/jenkins:latest
        credentials:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # env:
        #   # disable setup wizard
        #   JAVA_OPTS: -Djenkins.install.runSetupWizard=false
        ports:
          - 8080:8080
          - 50000:50000
    steps:
    - name: clone
      uses: actions/checkout@v3
    - uses: ./
      with:
        name: jenkins
        plugins: |
          job-dsl
          workflow-job
        jcasc_path: testdata/jcasc
    - uses: ./.github/actions/composite/post-commands
      with:
        id: ${{ job.services.jenkins.id }}
